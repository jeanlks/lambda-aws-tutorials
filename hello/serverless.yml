service: hello

provider:
  name: aws
  runtime: nodejs12.x
  region: sa-east-1
  environment:
    USER_TABLE: ${self:service}-user-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

functions:
  hello:
    handler: greetings/helloHandler.hello
    memorySize: 128
    events:
        - http: 
            path: hello
            method: get
            cors: true
            authorizer:
              name: verify-token
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 3600
  login:
      handler: auth/login.handler
      memorySize: 128
      events:
        - http:
            path: login
            method: post
            cors: true
  schedule:
    handler: scheduleHandler.handler
    memorySize: 128
    events:
      - http:
          path: schedule
          method: get
  verify-token:
    handler: auth/authorize.handler
    memorySize: 128
  register:
    handler: auth/register.handler
    memorySize: 128
    events:
      - http:
          path: register
          method: post
          cors: true
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
custom:
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true 
plugins:
  - serverless-offline
  - serverless-dynamodb-local